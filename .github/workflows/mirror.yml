name: mirror

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
      - 'gh-pages'

env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/G-EIP-700-NAN-7-1-eip-lucas.hauszler.git"
  UNWANTED_REGEX: '^(?!.*tests\/).*gc(no|da|ov)$|(.*\.(a|o|so))$|(.*~)$|^(#.*#)$|^tmp\/.*|.*\/tmp\/.*'

jobs:
  check_repository_cleanliness:
    name: Checks if the repository is clean and void of any unwanted files (temp files, binary files, etc.)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find unwanted files
        run: |
          UNWANTED_FILES=$(find . -type f -printf '%P\n' | grep -P "${{ env.UNWANTED_REGEX }}" || true)
          if [ -n "$UNWANTED_FILES" ]; then
            while IFS= read -r LINE; do
              echo "::error file=${LINE},line=1,col=1,title=Unwanted file detected::${LINE}"
            done <<< "$UNWANTED_FILES"
            echo "FAIL_TASK=true" >> "$GITHUB_ENV"
            exit 1
          else
            echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          fi

  check_program_compilation:
    name: Build and verify binaries
    needs: check_repository_cleanliness
    strategy:
      matrix:
        include:
          - os: windows-latest
            build_folder: "./build/windows/x64"
            lib_pre: ""
            lib_ext: ".lib"
          - os: ubuntu-latest
            build_folder: "./build/linux/x86_64"
            lib_pre: "lib"
            lib_ext: ".a"
    runs-on: ${{ matrix.os }}
    env:
      # List all expected binary files using the proper build folder.
      BINARY_NAMES: ${{ matrix.build_folder }}/release/${{ matrix.lib_pre }}EngineSquared${{ matrix.lib_ext }},${{ matrix.build_folder }}/release/${{ matrix.lib_pre }}EngineSquaredCore${{ matrix.lib_ext }},${{ matrix.build_folder }}/release/${{ matrix.lib_pre }}PluginCamera${{ matrix.lib_ext }},${{ matrix.build_folder }}/release/${{ matrix.lib_pre }}PluginInput${{ matrix.lib_ext }},${{ matrix.build_folder }}/release/${{ matrix.lib_pre }}PluginPhysics${{ matrix.lib_ext }},${{ matrix.build_folder }}/release/${{ matrix.lib_pre }}PluginWindow${{ matrix.lib_ext }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Linux dependencies
        if: contains(runner.os, 'windows') == false
        run: |
          sudo apt-get update
          sudo apt-get install -y libglu1-mesa-dev freeglut3-dev mesa-common-dev mesa-utils

      - name: Setup Windows dependencies
        if: contains(runner.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
          actions-cache-folder: '.xmake-cache'
          actions-cache-key: '${{ runner.os }}-xmake-install'
          package-cache: true
          package-cache-key: '${{ runner.os }}-xmake-entt-vulkan-glm'
          project-path: '.'

      - name: Build project
        run: xmake build -y
        timeout-minutes: 8

      - name: Verify binaries (Linux)
        if: runner.os != 'Windows'
        run: |
          echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          IFS=',' read -ra BINS <<< "${{ env.BINARY_NAMES }}"
          for BIN in "${BINS[@]}"; do
            if [ ! -f "$BIN" ]; then
              echo "::error file=$BIN,title=Binary not found::$BIN"
              echo "FAIL_TASK=true" >> "$GITHUB_ENV"
            fi
          done
          if grep -q "FAIL_TASK=true" "$GITHUB_ENV"; then exit 1; fi

      - name: Verify binaries (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          dir .\build\windows\
          dir .\build\windows\x64\
          dir .\build\windows\x64\release\

          $fail = $false
          $bins = "${{ env.BINARY_NAMES }}" -split ","
          foreach ($bin in $bins) {
            if (-not (Test-Path $bin)) {
              Write-Error "::error file=$bin,title=Binary not found::$bin"
              $fail = $true
            }
          }
          if ($fail) { exit 1 }

  run_tests:
    name: Run tests
    needs: check_repository_cleanliness
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Linux test dependencies
        if: contains(runner.os, 'windows') == false
        run: |
          sudo apt-get update
          sudo apt-get install -y libglu1-mesa-dev freeglut3-dev mesa-common-dev mesa-utils
          sudo apt-get install -y python3 python3-pip
          pip3 install gcovr

      - name: Setup Windows dependencies
        if: contains(runner.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
          actions-cache-folder: '.xmake-cache'
          actions-cache-key: '${{ runner.os }}-xmake-install'
          package-cache: true
          package-cache-key: '${{ runner.os }}-xmake-entt-vulkan-glm'
          project-path: '.'

      - name: Run tests (Linux)
        if: runner.os != 'Windows'
        run: |
          xmake test -y -D || {
            find build/.gens/ -type f -name "*.stdout.log" | while read -r file; do
              if grep -q "FAILED" "$file"; then
                echo "File: $file"
                cat "$file"
              fi
            done
            exit 1
          }
        timeout-minutes: 8

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (xmake test -y -D)) {
            Get-ChildItem -Path build\.gens\ -Filter "*.stdout.log" -Recurse | ForEach-Object {
              if (Select-String -Path $_.FullName -Pattern "FAILED") {
                Write-Host "File: $($_.FullName)"
                Get-Content $_.FullName
              }
            }
            exit 1
          }
        timeout-minutes: 8

      - name: Check test coverage (Linux)
        if: runner.os != 'Windows'
        uses: threeal/gcovr-action@v1.1.0

  push_to_mirror:
    name: Push to mirror repository
    if: github.event_name == 'push'
    needs: [check_program_compilation, run_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Push mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
