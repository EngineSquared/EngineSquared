name: mirror

on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
      - 'gh-pages'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.actor == 'github-actions[bot]' }}

env:
  MIRROR_URL: "git@github.com:EpitechPromo2026/G-EIP-700-NAN-7-1-eip-lucas.hauszler.git"
  UNWANTED_REGEX: '^(?!.*tests\/).*gc(no|da|ov)$|(.*\.(a|o|so|lib))$|(.*~)$|^(#.*#)$|^tmp\/.*|.*\/tmp\/.*'

jobs:
  check_repository_cleanliness:
    name: Checks if the repository is clean and void of any unwanted files (temp files, binary files, etc.)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find unwanted files
        run: |
          UNWANTED_FILES=$(find . -type f -printf '%P\n' | grep -P "${{ env.UNWANTED_REGEX }}" || true)
          if [ -n "$UNWANTED_FILES" ]; then
            while IFS= read -r LINE; do
              echo "::error file=${LINE},line=1,col=1,title=Unwanted file detected::${LINE}"
            done <<< "$UNWANTED_FILES"
            echo "FAIL_TASK=true" >> "$GITHUB_ENV"
            exit 1
          else
            echo "FAIL_TASK=false" >> "$GITHUB_ENV"
          fi

  lint_code:
    name: Lint with clang-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Run clang-format
        run: |
          git ls-files -z "*.cpp" "*.hpp" "*.inl" | while IFS= read -rd '' f; do tail -c1 < "$f" | read -r _ || echo >> "$f"; done
          find . -iname '*.hpp' -o -iname '*.cpp' -o -iname '*.inl' | xargs clang-format -i

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Push changes
        run: |
          git add .
          git commit -m "style: apply linter" || true
          git push || true

  check_program_compilation:
    name: Build and verify binaries
    needs: [check_repository_cleanliness, lint_code]
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
          - os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Linux dependencies
        if: contains(runner.os, 'windows') == false
        run: |
          sudo apt-get update
          sudo apt-get install -y libglu1-mesa-dev freeglut3-dev mesa-common-dev mesa-utils

      - name: Setup Windows dependencies
        if: contains(runner.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
          actions-cache-folder: '.xmake-cache'
          actions-cache-key: '${{ runner.os }}-xmake-install'
          package-cache: true
          package-cache-key: '${{ runner.os }}-xmake-entt-vulkan-glm'
          project-path: '.'

      - name: Build project
        run: xmake build -y
        timeout-minutes: 8

  run_tests:
    name: Run tests
    needs: [check_repository_cleanliness, lint_code]
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Linux test dependencies
        if: contains(runner.os, 'windows') == false
        run: |
          sudo apt-get update
          sudo apt-get install -y libglu1-mesa-dev freeglut3-dev mesa-common-dev mesa-utils
          sudo apt-get install -y python3 python3-pip
          pip3 install gcovr

      - name: Setup Windows dependencies
        if: contains(runner.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
          actions-cache-folder: '.xmake-cache'
          actions-cache-key: '${{ runner.os }}-xmake-install'
          package-cache: true
          package-cache-key: '${{ runner.os }}-xmake-entt-vulkan-glm'
          project-path: '.'

      - name: Run tests (Linux)
        if: runner.os != 'Windows'
        run: |
          xmake test -y -D
        timeout-minutes: 8

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          xmake test -y -D
        timeout-minutes: 8

      - name: Check test coverage (Linux)
        if: runner.os != 'Windows'
        uses: threeal/gcovr-action@v1.1.0

  push_to_mirror:
    name: Push to mirror repository
    if: github.event_name == 'push'
    needs: [check_program_compilation, run_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
